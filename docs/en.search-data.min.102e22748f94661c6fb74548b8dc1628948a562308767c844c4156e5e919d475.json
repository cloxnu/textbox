[{"id":0,"href":"/docs/documentation/box/","title":"Box","section":"Documentation","content":"Box #  The box.\n"},{"id":1,"href":"/docs/configuration/title-message-and-buttons/","title":"Title, Message and Buttons","section":"Configuration","content":"Title, Message and Buttons #  As a powerful ⚡️ UI component that can display a variety of different styles, we definitely don\u0026rsquo;t want to just use the default configuration, so here we start with three basic configurations: title, message and buttons.\nTitle #  Let\u0026rsquo;s start with the title.\ntextbox({ title: \u0026#39;Hello\u0026#39;, });  TRY  Did you see it? The title \u0026lsquo;Hello\u0026rsquo; appears in the title bar, let\u0026rsquo;s turn it to red:\ntextbox({ title: { content: \u0026#39;Hello\u0026#39;, color: \u0026#39;red\u0026#39;, }, });  TRY  Message #  Like title, message has the same properties, so let\u0026rsquo;s put together \u0026lsquo;Hello World\u0026rsquo;.\ntextbox({ title: \u0026#39;Hello\u0026#39;, message: \u0026#39;World\u0026#39;, });  TRY  Buttons #  Let\u0026rsquo;s have some interactivity with the textbox. Change the default \u0026lsquo;OK\u0026rsquo; button, we want to click it and then pop up a new textbox.\ntextbox({ title: \u0026#39;Hello\u0026#39;, message: \u0026#39;World\u0026#39;, button: { text: \u0026#39;New TextBox\u0026#39;, callback() { textbox(); }, }, });  TRY  Here you can have a second button to finish the cancel task.\ntextbox({ title: \u0026#39;Hello\u0026#39;, message: \u0026#39;World\u0026#39;, button: [{ text: \u0026#39;New TextBox\u0026#39;, callback() { textbox(); }, }, \u0026#39;Cancel\u0026#39;], });  TRY  Let\u0026rsquo;s have an advanced interaction. Can we make the current textbox disappear and then pop up a textbox with the same configuration after clicking this button?\n If we want to make the textbox disappear after clicking the button, try return true in the callback.\n function generate() { textbox({ title: \u0026#39;Hello\u0026#39;, message: \u0026#39;World\u0026#39;, button: { text: \u0026#39;Generate\u0026#39;, callback() { generate(); return true; }, }, }); }; generate();  TRY  "},{"id":2,"href":"/docs/getting-started/","title":"Getting Started","section":"Docs","content":"Getting Started #  Welcome again, this page will introduce the simplest usage of textbox and hopefully it will bring you the desire to continue exploring or to contribute to this project.\nFor now, textbox is still in beta, but you can still copy the textbox.js code here.  The simplest usage #  textbox();  TRY  If everything works, you will see the following result after pressing TRY. If not, please contact us.\nYour HTML code may look like:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;...\u0026lt;/title\u0026gt; ... \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; ... \u0026lt;/body\u0026gt; \u0026lt;script src=\u0026#34;textbox.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; Equivalent usage #  textbox() will generate an empty TextBox object, and render it to screen. So you can also realize it yourself.\nlet tb = new TextBox(); tb.render();  TRY  What\u0026rsquo;s next #  "},{"id":3,"href":"/docs/documentation/component/","title":"Component","section":"Documentation","content":"Component #  The most basic component, corresponding to an element.\nPrototype #  element: HTMLElement The element corresponding to this component.\nConfiguration #  Attributes #  id: string The value of element\u0026rsquo;s id content attribute.\nclass: string[] | string The value of element\u0026rsquo;s class content attribute.\nattr: object[] | object The element\u0026rsquo;s attributes. Pass in as a key-value pair or an array of key-value pairs.\nBasic #  innerHTML: string ~\u0026gt; innerHTML Configuration item ~\u0026gt; corresponding element property.\nStyles #  color: string ~\u0026gt; color bgColor: string ~\u0026gt; backgroundColor Configuration item ~\u0026gt; corresponding style property.\ncss: CssProperty[] | CssProperty csskv: object[] | object "},{"id":4,"href":"/docs/configuration/preset/","title":"Preset","section":"Configuration","content":"Preset #  Overview #  Preset can add a \u0026lsquo;preset\u0026rsquo; value to the configuration in advance, for example, you can preset the function of the button, and then you don\u0026rsquo;t need to specify the button in the real configuration. Sometimes a lot of common code can be eliminated.\nconst oneDollarPayment = { btn_text: \u0026#39;Pay $1\u0026#39;, btn_callback() { textbox({ title: \u0026#39;Thanks!\u0026#39;, message: \u0026#39;Successful payment!\u0026#39;, }); return true; }, }; textbox({ title: \u0026#39;Check the order\u0026#39;, message: \u0026#39;Buy 5 diamonds\u0026#39;, preset: oneDollarPayment, });  TRY  Priority #  Preset will not overwrite the part of the current configuration that overlaps with the preset configuration, i.e. the current configuration has a higher priority than preset\u0026rsquo;s.\ntextbox({ preset: { message: \u0026#39;Preset\u0026#39;, }, message: \u0026#39;Current\u0026#39;, });  TRY  Preset can only be used at the first level of the configuration. In the future, this warning may change.  "},{"id":5,"href":"/docs/configuration/","title":"Configuration","section":"Docs","content":"Configuration #  "},{"id":6,"href":"/docs/documentation/","title":"Documentation","section":"Docs","content":"Documentation #  "},{"id":7,"href":"/docs/configuration/alias/","title":"Alias","section":"Configuration","content":"Alias #   You\u0026rsquo;ll be surprised to know that when you want to use buttons, it works fine whether you use button or buttons in the textbox configuration.\n Overview #  Alias helps to replace complex key with simpler one in the configuration. For example, you can alias m to message, so you can configure messages with m in the configuration.\ntextbox({ alias: { m: \u0026#39;message\u0026#39;, }, m: \u0026#39;I am message!\u0026#39;, })  TRY  Priority #  Alias will not overwrite the part of the configuration after the alias that overlaps with the current configuration, i.e., the current configuration has a higher priority than the alias.\ntextbox({ alias: { m: \u0026#39;message\u0026#39;, }, m: \u0026#39;Alias\u0026#39;, message: \u0026#39;Current\u0026#39;, });  TRY  Multi-level alias #  value #  Alias was originally designed to reduce multi-level indentation, and in fact there are a large number of pre-defined aliases that use multi-level alias.\nIt is written as follows:\n{ alias: { name: [\u0026#39;first\u0026#39;, \u0026#39;second\u0026#39;, \u0026#39;third\u0026#39;], }, name: \u0026#39;123\u0026#39;, } and will be translated as:\n{ first: { second: { third: \u0026#39;123\u0026#39;, }, }, } In the real world, for example:\ntextbox({ alias: { m_cont: [\u0026#39;message\u0026#39;, \u0026#39;content\u0026#39;], m_color: [\u0026#39;message\u0026#39;, \u0026#39;color\u0026#39;], }, m_cont: \u0026#39;I am message content\u0026#39;, m_color: \u0026#39;green\u0026#39;, });  TRY  key #  If you want to alias a multi-level key, just put the alias inside that key.\ntextbox({ message: { alias: { c: \u0026#39;color\u0026#39;, }, content: \u0026#39;I am message\u0026#39;, }, alias: { mc: [\u0026#39;message\u0026#39;, \u0026#39;c\u0026#39;], }, mc: \u0026#39;red\u0026#39;, });  TRY  Use with preset #  Preset can set the preset value of the configuration, and likewise, it can set the alias in advance.\nconst msgAlias = { alias: { m: \u0026#39;message\u0026#39;, }, }; textbox({ m: \u0026#39;I am message\u0026#39;, preset: msgAlias, });  TRY  ⚠️ Warning: Unable to alias \u0026lsquo;preset\u0026rsquo;\nalias: { p: 'preset' } will not work.\n Alias itself #  It\u0026rsquo;s OK to alias itself.\ntextbox({ alias: { a: \u0026#39;alias\u0026#39;, }, a: { m: \u0026#39;message\u0026#39;, }, m: \u0026#39;I am message\u0026#39;, });  TRY  ⚠️ Warning: Invalid alias\nAliasing a value to the same value, or the same value at the first level, the alias is invalid.\n ⚠️ Warning: Avoid alias loops\nIf there is an alias loop in the alias configuration, you will get an unexpected result. As protection, aliases can be executed up to 10 times.\n "},{"id":8,"href":"/docs/configuration/update/","title":"Update","section":"Configuration","content":"Update #  If you want to change the content or style of the textbox, try update.\nOverview #  textbox({ title: \u0026#39;Original Title\u0026#39;, btn_text: \u0026#39;Change Title\u0026#39;, btn_callback(tb) { tb.update({ title: \u0026#39;Updated Title\u0026#39;, }); }, });  TRY  "},{"id":9,"href":"/docs/documentation/component/input/","title":"Input","section":"Component","content":"Input #  The input component.\nDeclaration #  Input: Component Configuration #  Attributes #  value: string ~\u0026gt; value type: string ~\u0026gt; type placeholder: string ~\u0026gt; placeholder max_length: number ~\u0026gt; maxLength Configuration item ~\u0026gt; corresponding element attribute.\ntype: The content type of the input element. possible values\nBasic #  focus_when_showing: boolean Auto-focus when box is visible. (default true)\n"},{"id":10,"href":"/docs/documentation/box/inputtextbox/","title":"InputTextBox","section":"Box","content":"InputTextBox #  The textbox with input component.\nDeclaration #  InputTextBox: TextBox Preset #  { alias: { 'input_text': ['input', 'value'], 'input_type': ['input', 'type'], 'placeholder': ['input', 'placeholder'], 'max_length': ['input', 'max_length'], } } Configuration #  input: Input "},{"id":11,"href":"/docs/documentation/box/textbox/","title":"TextBox","section":"Box","content":"TextBox #  The textbox.\nDeclaration #  TextBox: BaseBox Preset #  { alias: { 'button': 'buttons', 'btn_text': ['button', 'text'], 'btn_callback': ['button', 'callback'], } } Configuration #  message: Message buttons: ButtonGroup "},{"id":12,"href":"/docs/documentation/component/container/","title":"Container","section":"Component","content":"Container #  Container holds multiple components whose element is a div tag that is their parent node.\nDeclaration #  Container: Component "},{"id":13,"href":"/docs/documentation/component/buttongroup/","title":"ButtonGroup","section":"Component","content":"ButtonGroup #  The combined component including multiple button components.\nDeclaration #  ButtonGroup: Component Configuration #  buttons: string[] | string | Button[] | Button "},{"id":14,"href":"/docs/documentation/component/button/","title":"Button","section":"Component","content":"Button #  The button component.\nDeclaration #  Button: Component Configuration #  text: string The text content of button component.\ncallback: (_?: BaseBox) =\u0026gt; boolean The called callback after the button is clicked.\nstyle: string The style of button. Valid values:\n default (default) submit cancel waiting destroy img none  "},{"id":15,"href":"/docs/documentation/component/message/","title":"Message","section":"Component","content":"Message #  The message component.\nDeclaration #  Message: Component Configuration #  content: string The content of message component.\n"},{"id":16,"href":"/docs/documentation/box/basebox/","title":"BaseBox","section":"Box","content":"BaseBox #  The most basic box.\nDeclaration #  BaseBox: Component Prototype #  render: () =\u0026gt; void Render and display this box. (Animate)\nshow: () =\u0026gt; void Show this box from hidden state. (Animate)\nhide: () =\u0026gt; void Hide this box from non-hidden state. (Animate)\ndestroy: (completion?: () =\u0026gt; void) =\u0026gt; void Destroy this box, and completion will be called when box is completely destroyed. (Animate)\nremove: () =\u0026gt; void Remove this box instantly.\nupdate: (config?: object) =\u0026gt; void Update this box with new config.\nConfiguration #  Components #  backdrop: Container box: Container title_bar: Container box_content: Container title: Message x: Button The close button.\nBasic #  log: boolean Example #  let box = new BaseBox(); box.render();  TRY  "}]